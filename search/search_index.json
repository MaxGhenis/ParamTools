{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ParamTools Define, update, and validate your model's parameters. How to use ParamTools Subclass paramtools.Parameters and define your model's parameters : import paramtools class TaxParams(paramtools.Parameters): defaults = { \"schema\": { \"labels\": { \"year\": { \"type\": \"int\", \"validators\": {\"range\": {\"min\": 2013, \"max\": 2027}} }, \"marital_status\": { \"type\": \"str\", \"validators\": {\"choice\": {\"choices\": [\"single\", \"joint\"]}} }, }, \"additional_members\": { \"cpi_inflatable\": {\"type\": \"bool\", \"number_dims\": 0}, \"cpi_inflated\": {\"type\": \"bool\", \"number_dims\": 0} } }, \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": True, \"cpi_inflated\": True, \"type\": \"float\", \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2026, \"marital_status\": \"single\", \"value\": 7690.0}, {\"year\": 2026, \"marital_status\": \"joint\", \"value\": 15380.0}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } }, } params = TaxParams( initial_state={\"year\": [2024, 2025, 2026]}, array_first=True ) Check out the state: params.view_state() # {'year': [2024, 2025, 2026]} Parameters are available via instance attributes: params.standard_deduction # array([[13673.68, 27347.36], # [13967.66, 27935.33], # [ 7690. , 15380. ]]) Take a look at the standard deduction parameter's labels: params.from_array(\"standard_deduction\") # [{'year': 2024, 'marital_status': 'single', 'value': 13673.68}, # {'year': 2024, 'marital_status': 'joint', 'value': 27347.36}, # {'year': 2025, 'marital_status': 'single', 'value': 13967.66}, # {'year': 2025, 'marital_status': 'joint', 'value': 27935.33}, # {'year': 2026, 'marital_status': 'single', 'value': 7690.0}, # {'year': 2026, 'marital_status': 'joint', 'value': 15380.0}] Query the parameters: params.specification(year=2026, marital_status=\"single\", use_state=False) # OrderedDict([('standard_deduction', # [{'value': 0.0, 'year': 2026, 'marital_status': 'single'}])]) Adjust the default values: adjustment = { \"standard_deduction\": [ {\"year\": 2026, \"marital_status\": \"single\", \"value\": 10000.0} ], } params.adjust(adjustment) params.standard_deduction # array([[13673.68, 27347.36], # [13967.66, 27935.33], # [10000. , 15380. ]]) Set all values of the standard deduction parameter to 0: adjustment = { \"standard_deduction\": 0, } params.adjust(adjustment) params.standard_deduction # array([[0., 0.], # [0., 0.], # [0., 0.]]) Errors on invalid input: adjustment[\"standard_deduction\"] = \"higher\" params.adjust(adjustment) # --------------------------------------------------------------------------- # ValidationError Traceback (most recent call last) # <ipython-input-7-d9ad03cf54d8> in <module> # 1 adjustment[\"standard_deduction\"] = \"higher\" # ----> 2 params.adjust(adjustment) # ~/Documents/ParamTools/paramtools/parameters.py in adjust(self, params_or_path, raise_errors) # 134 # 135 if raise_errors and self._errors: # --> 136 raise self.validation_error # 137 # 138 # Update attrs. # ValidationError: {'standard_deduction': ['Not a valid number: higher.']} Errors on input that's out of range: adjustment[\"standard_deduction\"] = -1 params.adjust(adjustment) params.adjust(adjustment) # --------------------------------------------------------------------------- # ValidationError Traceback (most recent call last) # <ipython-input-8-8ea95339bb9b> in <module> # 1 adjustment[\"standard_deduction\"] = -1 # ----> 2 params.adjust(adjustment) # ~/Documents/ParamTools/paramtools/parameters.py in adjust(self, params_or_path, raise_errors) # 134 # 135 if raise_errors and self._errors: # --> 136 raise self.validation_error # 137 # 138 # Update attrs. # ValidationError: {'standard_deduction': ['standard_deduction -1.0 must be greater than 0.']} How to install ParamTools Install with conda: conda install -c conda-forge paramtools Install from source: git clone https://github.com/PSLmodels/ParamTools cd ParamTools conda env create conda activate paramtools-dev pip install -e . # optionally run tests: py.test -v Documentation Full documentation available at paramtools.org . Contributing Contributions are welcome! Checkout CONTRIBUTING.md to get started. Credits ParamTools is built on top of the excellent marshmallow JSON schema and validation framework. I encourage everyone to check out their repo and documentation. ParamTools was modeled off of Tax-Calculator's parameter processing and validation engine due to its maturity and sophisticated capabilities.","title":"Home"},{"location":"#paramtools","text":"Define, update, and validate your model's parameters.","title":"ParamTools"},{"location":"#how-to-use-paramtools","text":"Subclass paramtools.Parameters and define your model's parameters : import paramtools class TaxParams(paramtools.Parameters): defaults = { \"schema\": { \"labels\": { \"year\": { \"type\": \"int\", \"validators\": {\"range\": {\"min\": 2013, \"max\": 2027}} }, \"marital_status\": { \"type\": \"str\", \"validators\": {\"choice\": {\"choices\": [\"single\", \"joint\"]}} }, }, \"additional_members\": { \"cpi_inflatable\": {\"type\": \"bool\", \"number_dims\": 0}, \"cpi_inflated\": {\"type\": \"bool\", \"number_dims\": 0} } }, \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": True, \"cpi_inflated\": True, \"type\": \"float\", \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2026, \"marital_status\": \"single\", \"value\": 7690.0}, {\"year\": 2026, \"marital_status\": \"joint\", \"value\": 15380.0}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } }, } params = TaxParams( initial_state={\"year\": [2024, 2025, 2026]}, array_first=True ) Check out the state: params.view_state() # {'year': [2024, 2025, 2026]} Parameters are available via instance attributes: params.standard_deduction # array([[13673.68, 27347.36], # [13967.66, 27935.33], # [ 7690. , 15380. ]]) Take a look at the standard deduction parameter's labels: params.from_array(\"standard_deduction\") # [{'year': 2024, 'marital_status': 'single', 'value': 13673.68}, # {'year': 2024, 'marital_status': 'joint', 'value': 27347.36}, # {'year': 2025, 'marital_status': 'single', 'value': 13967.66}, # {'year': 2025, 'marital_status': 'joint', 'value': 27935.33}, # {'year': 2026, 'marital_status': 'single', 'value': 7690.0}, # {'year': 2026, 'marital_status': 'joint', 'value': 15380.0}] Query the parameters: params.specification(year=2026, marital_status=\"single\", use_state=False) # OrderedDict([('standard_deduction', # [{'value': 0.0, 'year': 2026, 'marital_status': 'single'}])]) Adjust the default values: adjustment = { \"standard_deduction\": [ {\"year\": 2026, \"marital_status\": \"single\", \"value\": 10000.0} ], } params.adjust(adjustment) params.standard_deduction # array([[13673.68, 27347.36], # [13967.66, 27935.33], # [10000. , 15380. ]]) Set all values of the standard deduction parameter to 0: adjustment = { \"standard_deduction\": 0, } params.adjust(adjustment) params.standard_deduction # array([[0., 0.], # [0., 0.], # [0., 0.]]) Errors on invalid input: adjustment[\"standard_deduction\"] = \"higher\" params.adjust(adjustment) # --------------------------------------------------------------------------- # ValidationError Traceback (most recent call last) # <ipython-input-7-d9ad03cf54d8> in <module> # 1 adjustment[\"standard_deduction\"] = \"higher\" # ----> 2 params.adjust(adjustment) # ~/Documents/ParamTools/paramtools/parameters.py in adjust(self, params_or_path, raise_errors) # 134 # 135 if raise_errors and self._errors: # --> 136 raise self.validation_error # 137 # 138 # Update attrs. # ValidationError: {'standard_deduction': ['Not a valid number: higher.']} Errors on input that's out of range: adjustment[\"standard_deduction\"] = -1 params.adjust(adjustment) params.adjust(adjustment) # --------------------------------------------------------------------------- # ValidationError Traceback (most recent call last) # <ipython-input-8-8ea95339bb9b> in <module> # 1 adjustment[\"standard_deduction\"] = -1 # ----> 2 params.adjust(adjustment) # ~/Documents/ParamTools/paramtools/parameters.py in adjust(self, params_or_path, raise_errors) # 134 # 135 if raise_errors and self._errors: # --> 136 raise self.validation_error # 137 # 138 # Update attrs. # ValidationError: {'standard_deduction': ['standard_deduction -1.0 must be greater than 0.']}","title":"How to use ParamTools"},{"location":"#how-to-install-paramtools","text":"Install with conda: conda install -c conda-forge paramtools Install from source: git clone https://github.com/PSLmodels/ParamTools cd ParamTools conda env create conda activate paramtools-dev pip install -e . # optionally run tests: py.test -v","title":"How to install ParamTools"},{"location":"#documentation","text":"Full documentation available at paramtools.org .","title":"Documentation"},{"location":"#contributing","text":"Contributions are welcome! Checkout CONTRIBUTING.md to get started.","title":"Contributing"},{"location":"#credits","text":"ParamTools is built on top of the excellent marshmallow JSON schema and validation framework. I encourage everyone to check out their repo and documentation. ParamTools was modeled off of Tax-Calculator's parameter processing and validation engine due to its maturity and sophisticated capabilities.","title":"Credits"},{"location":"parameters/","text":"Parameters Define your default parameters and let ParamTools handle the rest. The ParamTools JSON file is split into two components: a component that defines the structure of your default inputs and a component that defines the variables that are used in your model. The first component is a top level member named schema . The second component consists of key-value pairs where the key is the parameter's name and the value is its data. { \"schema\": { \"labels\": { \"year\": { \"type\": \"int\", \"validators\": {\"range\": {\"min\": 2013, \"max\": 2027}} }, \"marital_status\": { \"type\": \"str\", \"validators\": {\"choice\": {\"choices\": [\"single\", \"joint\", \"separate\", \"headhousehold\", \"widow\"]}} }, }, \"additional_members\": { \"cpi_inflatable\": {\"type\": \"bool\"}, \"cpi_inflated\": {\"type\": \"bool\"} } }, \"personal_exemption\": { \"title\": \"Personal Exemption\", \"description\": \"A simple version of the personal exemption.\", \"notes\": \"\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"value\": 0, \"validators\": { \"range\": { \"min\": 0, } } }, \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2024, \"marital_status\": \"separate\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"headhousehold\", \"value\": 20510.52}, {\"year\": 2024, \"marital_status\": \"widow\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2025, \"marital_status\": \"separate\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"headhousehold\", \"value\": 20951.49}, {\"year\": 2025, \"marital_status\": \"widow\", \"value\": 27935.33}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } }, } Parameters Schema { \"schema\": { \"labels\": { \"year\": { \"type\": \"int\", \"validators\": {\"range\": {\"min\": 2013, \"max\": 2027}} } }, \"additional_members\": { \"cpi_inflatable\": {\"type\": \"bool\"}, \"cpi_inflated\": {\"type\": \"bool\"} } } } labels : Labels are used for defining, accessing, and updating a parameter's values. additional_members : Additional Members are parameter level members that are specific to your model. For example, \"title\" is a parameter level member that is required by ParamTools, but \"cpi_inflated\" is not. Therefore, \"cpi_inflated\" needs to be defined in additional_members . Default Parameters { \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"number_dims\": 0, \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2024, \"marital_status\": \"separate\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"headhousehold\", \"value\": 20510.52}, {\"year\": 2024, \"marital_status\": \"widow\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2025, \"marital_status\": \"separate\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"headhousehold\", \"value\": 20951.49}, {\"year\": 2025, \"marital_status\": \"widow\", \"value\": 27935.33}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } } } Members: title : A human readable name for the parameter. description : Describe the parameter. notes : ( optional ) Additional advice or information. type : Data type of the parameter. Allowed types are int , float , bool , str and date (YYYY-MM-DD). number_dims : ( optional, default is 0 ) Number of dimensions for the value, as defined by np.ndim . value : Value of the parameter and optionally, the corresponding labels. It can be written in two ways: if labels are used: {\"value\": [{\"value\": \"my value\", **labels}]} if labels are not used: {\"value\": \"my value\"} validators : Key-value pairs of the validator objects ( the ranges are inclusive ): { \"validators\": { \"range\": {\"min\": \"min value\", \"max\": \"max value\"}, \"choice\": {\"choices\": [\"list\", \"of\", \"allowed\", \"values\"]}, \"date_range\": {\"min\": \"2018-01-01\", \"max\": \"2018-06-01\"} } }","title":"Parameters"},{"location":"parameters/#parameters","text":"Define your default parameters and let ParamTools handle the rest. The ParamTools JSON file is split into two components: a component that defines the structure of your default inputs and a component that defines the variables that are used in your model. The first component is a top level member named schema . The second component consists of key-value pairs where the key is the parameter's name and the value is its data. { \"schema\": { \"labels\": { \"year\": { \"type\": \"int\", \"validators\": {\"range\": {\"min\": 2013, \"max\": 2027}} }, \"marital_status\": { \"type\": \"str\", \"validators\": {\"choice\": {\"choices\": [\"single\", \"joint\", \"separate\", \"headhousehold\", \"widow\"]}} }, }, \"additional_members\": { \"cpi_inflatable\": {\"type\": \"bool\"}, \"cpi_inflated\": {\"type\": \"bool\"} } }, \"personal_exemption\": { \"title\": \"Personal Exemption\", \"description\": \"A simple version of the personal exemption.\", \"notes\": \"\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"value\": 0, \"validators\": { \"range\": { \"min\": 0, } } }, \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2024, \"marital_status\": \"separate\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"headhousehold\", \"value\": 20510.52}, {\"year\": 2024, \"marital_status\": \"widow\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2025, \"marital_status\": \"separate\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"headhousehold\", \"value\": 20951.49}, {\"year\": 2025, \"marital_status\": \"widow\", \"value\": 27935.33}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } }, }","title":"Parameters"},{"location":"parameters/#parameters-schema","text":"{ \"schema\": { \"labels\": { \"year\": { \"type\": \"int\", \"validators\": {\"range\": {\"min\": 2013, \"max\": 2027}} } }, \"additional_members\": { \"cpi_inflatable\": {\"type\": \"bool\"}, \"cpi_inflated\": {\"type\": \"bool\"} } } } labels : Labels are used for defining, accessing, and updating a parameter's values. additional_members : Additional Members are parameter level members that are specific to your model. For example, \"title\" is a parameter level member that is required by ParamTools, but \"cpi_inflated\" is not. Therefore, \"cpi_inflated\" needs to be defined in additional_members .","title":"Parameters Schema"},{"location":"parameters/#default-parameters","text":"{ \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"number_dims\": 0, \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2024, \"marital_status\": \"separate\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"headhousehold\", \"value\": 20510.52}, {\"year\": 2024, \"marital_status\": \"widow\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2025, \"marital_status\": \"separate\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"headhousehold\", \"value\": 20951.49}, {\"year\": 2025, \"marital_status\": \"widow\", \"value\": 27935.33}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } } }","title":"Default Parameters"},{"location":"parameters/#members","text":"title : A human readable name for the parameter. description : Describe the parameter. notes : ( optional ) Additional advice or information. type : Data type of the parameter. Allowed types are int , float , bool , str and date (YYYY-MM-DD). number_dims : ( optional, default is 0 ) Number of dimensions for the value, as defined by np.ndim . value : Value of the parameter and optionally, the corresponding labels. It can be written in two ways: if labels are used: {\"value\": [{\"value\": \"my value\", **labels}]} if labels are not used: {\"value\": \"my value\"} validators : Key-value pairs of the validator objects ( the ranges are inclusive ): { \"validators\": { \"range\": {\"min\": \"min value\", \"max\": \"max value\"}, \"choice\": {\"choices\": [\"list\", \"of\", \"allowed\", \"values\"]}, \"date_range\": {\"min\": \"2018-01-01\", \"max\": \"2018-06-01\"} } }","title":"Members:"}]}