{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ParamTools ParamTools defines the parameter input space for computational modeling projects. Defines the default parameter space. Facilitates adjusting that space. Performs validation on the default space and the adjusted space. How to use ParamTools Subclass the Parameters class and set up your parameters : from paramtools import Parameters from paramtools import get_example_paths schema_, defaults_ = get_example_paths('taxparams-demo') class TaxParams(Parameters): schema = schema_ # schema.json defaults = defaults_ # defaults.json params = TaxParams( initial_state={\"year\": [2024, 2025, 2026]}, array_first=True ) print(\"# output \", params.view_state()) # output {'year': [2024, 2025, 2026]} Parameters are available via instance attributes: params.standard_deduction # output: [[13673.68 27347.36 13673.68 20510.52 27347.36] # [13967.66 27935.33 13967.66 20951.49 27935.33] # [ 7690. 15380. 7690. 11323. 15380. ]] Get the parameter's value object : params.from_array(\"standard_deduction\") # output: [{'year': 2024, 'marital_status': 'single', 'value': 13673.68}, {'year': 2024, 'marital_status': 'joint', 'value': 27347.36}, {'year': 2024, 'marital_status': 'separate', 'value': 13673.68}, {'year': 2024, 'marital_status': 'headhousehold', 'value': 20510.52}, {'year': 2024, 'marital_status': 'widow', 'value': 27347.36}, {'year': 2025, 'marital_status': 'single', 'value': 13967.66}, {'year': 2025, 'marital_status': 'joint', 'value': 27935.33}, {'year': 2025, 'marital_status': 'separate', 'value': 13967.66}, {'year': 2025, 'marital_status': 'headhousehold', 'value': 20951.49}, {'year': 2025, 'marital_status': 'widow', 'value': 27935.33}, {'year': 2026, 'marital_status': 'single', 'value': 7690.0}, {'year': 2026, 'marital_status': 'joint', 'value': 15380.0}, {'year': 2026, 'marital_status': 'separate', 'value': 7690.0}, {'year': 2026, 'marital_status': 'headhousehold', 'value': 11323.0}, {'year': 2026, 'marital_status': 'widow', 'value': 15380.0}] Adjust the default specification: adjustment = { \"standard_deduction\": [ {\"year\": 2026, \"marital_status\": \"single\", \"value\": 10000.0} ], \"social_security_tax_rate\": [ {\"year\": 2026, \"value\": 0.14} ] } params.adjust(adjustment) params.standard_deduction # output: [[13673.68 27347.36 13673.68 20510.52 27347.36] # [13967.66 27935.33 13967.66 20951.49 27935.33] # [10000. 15380. 7690. 11323. 15380. ]] print(params.social_security_tax_rate) # output: [0.124 0.124 0.14 ] Errors on invalid input: adjustment[\"standard_deduction\"] = [{ \"year\": 2026, \"marital_status\": \"single\", \"value\": \"higher\" }] params.adjust(adjustment) # output: Traceback (most recent call last): File \"doc_ex.py\", line 60, in <module> raise saved_exc File \"doc_ex.py\", line 33, in <module> params.adjust(adjustment) File \"/home/henrydoupe/Documents/ParamTools/paramtools/parameters.py\", line 123, in adjust raise self.validation_error paramtools.exceptions.ValidationError: {'standard_deduction': ['Not a valid number: higher.']} Errors on input that's out of range: # get value of ii_bracket_2 at year 2026, marital status \"single\". spec = params.specification(year=2026, marital_status=\"single\", use_state=False) spec # output: OrderedDict([('standard_deduction', [{'year': 2026, 'value': 10000.0, 'marital_status': 'single'}]), ('ii_bracket_1', [{'year': 2026, 'value': 11293.0, 'marital_status': 'single'}]), ('ii_bracket_2', [{'year': 2026, 'value': 45957.0, 'marital_status': 'single'}]), ('social_security_tax_rate', [{'year': 2026, 'value': 0.14}])]) ii_bracket_2_val = spec[\"ii_bracket_2\"][0][\"value\"] ii_bracket_2_val # output: 45957.0 adjustment = { \"standard_deduction\": [{ \"year\": 2026, \"marital_status\": \"single\", \"value\": -1 }], \"ii_bracket_1\": [{ \"year\": 2026, \"marital_status\": \"single\", \"value\": ii_bracket_2_val + 1} ] } params.adjust(adjustment, raise_errors=False) params.errors # output: # { # 'standard_deduction': ['standard_deduction -1.0 must be greater than 0 for dimensions marital_status=single , year=2026'], # 'ii_bracket_1': ['ii_bracket_1 45958.0 must be less than 45957.0 for dimensions marital_status=single , year=2026'] # } How to install ParamTools Install with conda: conda install -c conda-forge paramtools Install from source: git clone https://github.com/PSLmodels/ParamTools cd ParamTools conda env create conda activate paramtools-dev pip install -e . # optionally run tests: py.test -v Documentation Full documentation available at https://pslmodels.github.io/ParamTools/. Contributing Contributions are welcome! Checkout CONTRIBUTING.md to get started. Credits ParamTools is built on top of the excellent marshmallow JSON schema and validation framework. I encourage everyone to checkout their repo and documentation. ParamTools was modeled off of Tax-Calculator's parameter processing and validation engine due to its maturity and sophisticated capabilities.","title":"Home"},{"location":"#paramtools","text":"ParamTools defines the parameter input space for computational modeling projects. Defines the default parameter space. Facilitates adjusting that space. Performs validation on the default space and the adjusted space.","title":"ParamTools"},{"location":"#how-to-use-paramtools","text":"Subclass the Parameters class and set up your parameters : from paramtools import Parameters from paramtools import get_example_paths schema_, defaults_ = get_example_paths('taxparams-demo') class TaxParams(Parameters): schema = schema_ # schema.json defaults = defaults_ # defaults.json params = TaxParams( initial_state={\"year\": [2024, 2025, 2026]}, array_first=True ) print(\"# output \", params.view_state()) # output {'year': [2024, 2025, 2026]} Parameters are available via instance attributes: params.standard_deduction # output: [[13673.68 27347.36 13673.68 20510.52 27347.36] # [13967.66 27935.33 13967.66 20951.49 27935.33] # [ 7690. 15380. 7690. 11323. 15380. ]] Get the parameter's value object : params.from_array(\"standard_deduction\") # output: [{'year': 2024, 'marital_status': 'single', 'value': 13673.68}, {'year': 2024, 'marital_status': 'joint', 'value': 27347.36}, {'year': 2024, 'marital_status': 'separate', 'value': 13673.68}, {'year': 2024, 'marital_status': 'headhousehold', 'value': 20510.52}, {'year': 2024, 'marital_status': 'widow', 'value': 27347.36}, {'year': 2025, 'marital_status': 'single', 'value': 13967.66}, {'year': 2025, 'marital_status': 'joint', 'value': 27935.33}, {'year': 2025, 'marital_status': 'separate', 'value': 13967.66}, {'year': 2025, 'marital_status': 'headhousehold', 'value': 20951.49}, {'year': 2025, 'marital_status': 'widow', 'value': 27935.33}, {'year': 2026, 'marital_status': 'single', 'value': 7690.0}, {'year': 2026, 'marital_status': 'joint', 'value': 15380.0}, {'year': 2026, 'marital_status': 'separate', 'value': 7690.0}, {'year': 2026, 'marital_status': 'headhousehold', 'value': 11323.0}, {'year': 2026, 'marital_status': 'widow', 'value': 15380.0}] Adjust the default specification: adjustment = { \"standard_deduction\": [ {\"year\": 2026, \"marital_status\": \"single\", \"value\": 10000.0} ], \"social_security_tax_rate\": [ {\"year\": 2026, \"value\": 0.14} ] } params.adjust(adjustment) params.standard_deduction # output: [[13673.68 27347.36 13673.68 20510.52 27347.36] # [13967.66 27935.33 13967.66 20951.49 27935.33] # [10000. 15380. 7690. 11323. 15380. ]] print(params.social_security_tax_rate) # output: [0.124 0.124 0.14 ] Errors on invalid input: adjustment[\"standard_deduction\"] = [{ \"year\": 2026, \"marital_status\": \"single\", \"value\": \"higher\" }] params.adjust(adjustment) # output: Traceback (most recent call last): File \"doc_ex.py\", line 60, in <module> raise saved_exc File \"doc_ex.py\", line 33, in <module> params.adjust(adjustment) File \"/home/henrydoupe/Documents/ParamTools/paramtools/parameters.py\", line 123, in adjust raise self.validation_error paramtools.exceptions.ValidationError: {'standard_deduction': ['Not a valid number: higher.']} Errors on input that's out of range: # get value of ii_bracket_2 at year 2026, marital status \"single\". spec = params.specification(year=2026, marital_status=\"single\", use_state=False) spec # output: OrderedDict([('standard_deduction', [{'year': 2026, 'value': 10000.0, 'marital_status': 'single'}]), ('ii_bracket_1', [{'year': 2026, 'value': 11293.0, 'marital_status': 'single'}]), ('ii_bracket_2', [{'year': 2026, 'value': 45957.0, 'marital_status': 'single'}]), ('social_security_tax_rate', [{'year': 2026, 'value': 0.14}])]) ii_bracket_2_val = spec[\"ii_bracket_2\"][0][\"value\"] ii_bracket_2_val # output: 45957.0 adjustment = { \"standard_deduction\": [{ \"year\": 2026, \"marital_status\": \"single\", \"value\": -1 }], \"ii_bracket_1\": [{ \"year\": 2026, \"marital_status\": \"single\", \"value\": ii_bracket_2_val + 1} ] } params.adjust(adjustment, raise_errors=False) params.errors # output: # { # 'standard_deduction': ['standard_deduction -1.0 must be greater than 0 for dimensions marital_status=single , year=2026'], # 'ii_bracket_1': ['ii_bracket_1 45958.0 must be less than 45957.0 for dimensions marital_status=single , year=2026'] # }","title":"How to use ParamTools"},{"location":"#how-to-install-paramtools","text":"Install with conda: conda install -c conda-forge paramtools Install from source: git clone https://github.com/PSLmodels/ParamTools cd ParamTools conda env create conda activate paramtools-dev pip install -e . # optionally run tests: py.test -v","title":"How to install ParamTools"},{"location":"#documentation","text":"Full documentation available at https://pslmodels.github.io/ParamTools/.","title":"Documentation"},{"location":"#contributing","text":"Contributions are welcome! Checkout CONTRIBUTING.md to get started.","title":"Contributing"},{"location":"#credits","text":"ParamTools is built on top of the excellent marshmallow JSON schema and validation framework. I encourage everyone to checkout their repo and documentation. ParamTools was modeled off of Tax-Calculator's parameter processing and validation engine due to its maturity and sophisticated capabilities.","title":"Credits"},{"location":"parameters/","text":"Parameters Define your default parameters as a JSON file and let ParamTools handle the rest. The ParamTools JSON file is split into two components: a component that defines the structure of your default inputs and a component that defines the variables that are used in your model. The first is a top level member named schema . The latter are top-level members named as your model refers to them. { \"schema\": { \"selectors\": { \"year\": { \"type\": \"int\", \"validators\": {\"range\": {\"min\": 2013, \"max\": 2027}} }, \"marital_status\": { \"type\": \"str\", \"validators\": {\"choice\": {\"choices\": [\"single\", \"joint\", \"separate\", \"headhousehold\", \"widow\"]}} }, }, \"additional_members\": { \"cpi_inflatable\": {\"type\": \"bool\"}, \"cpi_inflated\": {\"type\": \"bool\"} } }, \"personal_exemption\": { \"title\": \"Personal Exemption\", \"description\": \"A simple version of the personal exemption.\", \"notes\": \"\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"value\": 0, \"validators\": { \"range\": { \"min\": 0, } } }, \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2024, \"marital_status\": \"separate\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"headhousehold\", \"value\": 20510.52}, {\"year\": 2024, \"marital_status\": \"widow\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2025, \"marital_status\": \"separate\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"headhousehold\", \"value\": 20951.49}, {\"year\": 2025, \"marital_status\": \"widow\", \"value\": 27935.33}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } }, } Input Structure { \"schema\": { \"selectors\": \"mapping of selector objects\" }, \"additional_members\": \"mapping of additional member objects\" } Selector Objects are used to define the ways in which a parameter's values are defined, accessed, and updated. Additional Members are top level members that are used by your model and not required by ParamTools. Default Parameters { \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"number_dims\": 0, \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2024, \"marital_status\": \"separate\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"headhousehold\", \"value\": 20510.52}, {\"year\": 2024, \"marital_status\": \"widow\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2025, \"marital_status\": \"separate\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"headhousehold\", \"value\": 20951.49}, {\"year\": 2025, \"marital_status\": \"widow\", \"value\": 27935.33}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } } } Members: title : A human readable name for the parameter. description : Describe the parameter. notes : ( optional ) Additional advice or information. type : Data type of the parameter. Allowed types are int , float , bool , str and date (YYYY-MM-DD). number_dims : ( optional, default is 0 ) Number of dimensions for the value, as defined by np.ndim value : Value of the parameter and optionally, the corresponding selectors. It can be written in two ways: if selectors are used: ```json { \"value\": [{\"value\": \"my value\", **selectors}] } ``` if selectors are not used: ```json { \"value\": \"my value\" } ``` validators : Key-value pairs of the validator objects: ```json { \"validators\": { \"range\": {\"min\": \"min value\", \"max\": \"max value\"}, \"choice\": {\"choices\": [\"list\", \"of\", \"allowed\", \"values\"]}, \"date_range\": {\"min\": \"2018-01-01\", \"max\": \"2018-06-01\"} } } ``` Note that the ranges are inclusive.","title":"Parameters"},{"location":"parameters/#parameters","text":"Define your default parameters as a JSON file and let ParamTools handle the rest. The ParamTools JSON file is split into two components: a component that defines the structure of your default inputs and a component that defines the variables that are used in your model. The first is a top level member named schema . The latter are top-level members named as your model refers to them. { \"schema\": { \"selectors\": { \"year\": { \"type\": \"int\", \"validators\": {\"range\": {\"min\": 2013, \"max\": 2027}} }, \"marital_status\": { \"type\": \"str\", \"validators\": {\"choice\": {\"choices\": [\"single\", \"joint\", \"separate\", \"headhousehold\", \"widow\"]}} }, }, \"additional_members\": { \"cpi_inflatable\": {\"type\": \"bool\"}, \"cpi_inflated\": {\"type\": \"bool\"} } }, \"personal_exemption\": { \"title\": \"Personal Exemption\", \"description\": \"A simple version of the personal exemption.\", \"notes\": \"\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"value\": 0, \"validators\": { \"range\": { \"min\": 0, } } }, \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2024, \"marital_status\": \"separate\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"headhousehold\", \"value\": 20510.52}, {\"year\": 2024, \"marital_status\": \"widow\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2025, \"marital_status\": \"separate\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"headhousehold\", \"value\": 20951.49}, {\"year\": 2025, \"marital_status\": \"widow\", \"value\": 27935.33}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } }, }","title":"Parameters"},{"location":"parameters/#input-structure","text":"{ \"schema\": { \"selectors\": \"mapping of selector objects\" }, \"additional_members\": \"mapping of additional member objects\" } Selector Objects are used to define the ways in which a parameter's values are defined, accessed, and updated. Additional Members are top level members that are used by your model and not required by ParamTools.","title":"Input Structure"},{"location":"parameters/#default-parameters","text":"{ \"standard_deduction\": { \"title\": \"Standard deduction amount\", \"description\": \"Amount filing unit can use as a standard deduction.\", \"cpi_inflatable\": true, \"cpi_inflated\": true, \"type\": \"float\", \"number_dims\": 0, \"value\": [ {\"year\": 2024, \"marital_status\": \"single\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"joint\", \"value\": 27347.36}, {\"year\": 2024, \"marital_status\": \"separate\", \"value\": 13673.68}, {\"year\": 2024, \"marital_status\": \"headhousehold\", \"value\": 20510.52}, {\"year\": 2024, \"marital_status\": \"widow\", \"value\": 27347.36}, {\"year\": 2025, \"marital_status\": \"single\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"joint\", \"value\": 27935.33}, {\"year\": 2025, \"marital_status\": \"separate\", \"value\": 13967.66}, {\"year\": 2025, \"marital_status\": \"headhousehold\", \"value\": 20951.49}, {\"year\": 2025, \"marital_status\": \"widow\", \"value\": 27935.33}], \"validators\": { \"range\": { \"min\": 0, \"max\": 9e+99 } } } }","title":"Default Parameters"},{"location":"parameters/#members","text":"title : A human readable name for the parameter. description : Describe the parameter. notes : ( optional ) Additional advice or information. type : Data type of the parameter. Allowed types are int , float , bool , str and date (YYYY-MM-DD). number_dims : ( optional, default is 0 ) Number of dimensions for the value, as defined by np.ndim value : Value of the parameter and optionally, the corresponding selectors. It can be written in two ways: if selectors are used: ```json { \"value\": [{\"value\": \"my value\", **selectors}] } ``` if selectors are not used: ```json { \"value\": \"my value\" } ``` validators : Key-value pairs of the validator objects: ```json { \"validators\": { \"range\": {\"min\": \"min value\", \"max\": \"max value\"}, \"choice\": {\"choices\": [\"list\", \"of\", \"allowed\", \"values\"]}, \"date_range\": {\"min\": \"2018-01-01\", \"max\": \"2018-06-01\"} } } ``` Note that the ranges are inclusive.","title":"Members:"}]}